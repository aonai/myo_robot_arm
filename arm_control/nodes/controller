#!/usr/bin/env python3
"""
This node is going to attach a table under a px100 robot in rviz. It will also initiates three services to let 
user control the robot using predefined positions, user specified positions, or stored positions.

SERVICES:
  + reset (Empty) ~ controls the px100 robot to move a box placed at (0.13, 0.13, 0.125) to (0.13, -0.13, 0.125), and then 
                        goes back to home position without hitting the box. Provides option to clear a set of stored waypoints.
"""

import rospy
import sys
import moveit_commander
from geometry_msgs.msg import PoseStamped, Pose
from moveit_msgs.msg import MoveItErrorCodes
from sensor_msgs.msg import Imu, JointState
from interbotix_xs_sdk.msg import JointGroupCommand, JointSingleCommand
from ros_myo.msg import MyoPose



class Handler:
    """ Helper class for node mover.
    Initiates interbotix_moveit controlls for a px100 robot. At start up, a table will be added to the scene in rviz to simulate
    the robot sitting on a table. The class will also start three services: reset, step, and follow.  
    """
    def __init__(self):
        self.errCode = MoveItErrorCodes.FAILURE 
        self.Ky = 0.5
        self.Kz = 1
        self.imu_lower = None
        self.imu_upper = None
        self.gest = 0
        self.joint_state = None
        self.joint_state_name = None
        self.first_js = None
        self.robot = moveit_commander.RobotCommander(robot_description='px100/robot_description')
        self.scene = moveit_commander.PlanningSceneInterface(ns='px100')
        self.group = moveit_commander.MoveGroupCommander("interbotix_arm", robot_description='px100/robot_description', ns='px100')
        self.gripper_group = moveit_commander.MoveGroupCommander("interbotix_gripper", robot_description='px100/robot_description', ns='px100')

        # self.group.set_named_target("Home")
        # self.group.go(wait=True)
        # self.group.stop()

        self.add_table()
        # self.imu__lower_sub = rospy.Subscriber('myo_raw/myo_imu', Imu, self.imu_lower_callback)
        # self.imu__upper_sub = rospy.Subscriber('myo_upper/myo_imu', Imu, self.imu_upper_callback)
        # self.gest_sub = rospy.Subscriber("myo_raw/myo_gest", MyoPose, self.gest_callback)
        # self.cmd_pub = rospy.Publisher('px100/commands/joint_group', JointGroupCommand, queue_size = 10)
        self.cmd_pub = rospy.Publisher('px100/commands/joint_single', JointSingleCommand, queue_size = 10)
        self.jonit_sub = rospy.Subscriber("px100/joint_states", JointState, self.joint_callback)

        rospy.Timer(rospy.Duration(0.5), self.test_arm) 

        # while not rospy.is_shutdown(): 
    def test_arm(self, event):
        # moveit commands
        current_joints = self.group.get_current_joint_values()
        print("current_joints = ", current_joints)
        target = current_joints.copy()
        target[0] += 0.1
        self.group.set_joint_value_target(target)
        self.execute_path() 

        # if self.joint_state is not None:
        #     cmd_msg = JointGroupCommand()
        #     cmd_msg.name = 'arm'
        #     # cmd_msg.cmd = self.joint_state[:4].copy()
        #     cmd_msg.cmd = self.first_js[:4].copy()
        #     print("initial = ", self.first_js)
        #     cmd_msg.cmd[0] = self.joint_state[0] + 0.1
        #     print("command = ", cmd_msg.cmd)
        #     self.cmd_pub.publish(cmd_msg)

        # if self.joint_state is not None:
        #     cmd_msg = JointSingleCommand()
        #     idx = 0
        #     cmd_msg.name = self.joint_state_name[idx]
        #     print("JS = ", self.joint_state)
        #     cmd_msg.cmd = self.joint_state[idx] + 0.1
        #     print("command 1 = ", cmd_msg)
        #     self.cmd_pub.publish(cmd_msg)

            # cmd_msg = JointSingleCommand()
            # idx = 1
            # cmd_msg.name = self.joint_state_name[idx]
            # cmd_msg.cmd = self.joint_state[idx] + 0.1
            # print("command 2 = ", cmd_msg)
            # self.cmd_pub.publish(cmd_msg)

        # while(True):
        #     if self.imu_lower is not None and self.imu_upper is not None:
        #         current_joints = self.group.get_current_joint_values()
        #         target = current_joints.copy()
                
        #         # target[0] -= self.imu.orientation.y*self.Ky
        #         target[1] -= self.imu_lower.orientation.z*self.Kz
        #         # target[1] -= 0.05
        #         self.group.set_joint_value_target(target)
        #         self.execute_path() 
        #         self.imu_lower = None
        #         self.imu_upper = None
        #         time.sleep(1)
            
            # if self.gest > 1:
            #     rospy.loginfo(f"gest = {self.gest}")

            #     if self.gest == 2:
            #         self.gripper_group.set_named_target("Closed")
            #         self.gripper_group.go(wait=True)
            #         self.group.stop()
            #         self.group.clear_pose_targets()
            #     elif self.gest == 5:
            #         self.gripper_group.set_named_target("Open")
            #         self.gripper_group.go(wait=True)
            #         self.group.stop()
            #         self.group.clear_pose_targets()


        
    def add_table(self):
        """ Adds a table to the scene and display in rviz """
        rospy.sleep(0.5)
        p = PoseStamped()
        p.header.frame_id = "world"
        p.pose.position.z = -0.025
        self.scene.add_box("table", p, (1, 1, 0.05))

    def gest_callback(self, data):
        self.gest = data.pose
        self.gest = 0

    def joint_callback(self, data):
        self.joint_state = list(data.position)
        # rospy.loginfo(f"joints = {self.joint_state}")
        if self.first_js is None:
            self.first_js = list(self.joint_state)
            self.joint_state_name = list(data.name)
            print("name = ", self.joint_state_name)

    def execute_path(self):
        """ helper function for executing planned path in move group """ 
        # rospy.logdebug("Execute plan")
        (result, plan, frac, errCode) = self.group.plan()
        
        # rospy.loginfo(f"err code = {errCode}")
        rospy.loginfo(f"plan = {plan}")
        result = self.group.execute(plan, wait=True)
        self.group.stop()
        self.group.clear_pose_targets()


def main():
    """ The main() function. """
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.loginfo(sys.argv)
    rospy.init_node('arm_control')
    handler = Handler()

    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass